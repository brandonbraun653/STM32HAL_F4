import lib/CommonTools/boost-build/features/thor ;

# ====================================================
# Local Rules 
# ====================================================
local rule explicit_alias ( name : sources * : requirements * : default-build * : usage-requirements * )
    {
    alias $(name) : $(sources) : $(requirements) : $(default-build) : $(usage-requirements) ;
    explicit $(name) ;
    }

# ====================================================
# Local Resources 
# ====================================================
# ------------------------------------------
# Build Target Specific Options 
# ------------------------------------------
local f4_dbg_defs = DEBUG ;
local f4_dbg_cflags = -ggdb -Og ;

local f4_rel_defs = NDEBUG ;
local f4_rel_cflags = -O3 ;

local linker_dir = $(STM32F4_ROOT)/Device/ld ;

# ------------------------------------------
# Generic STM32F4 Family CFlags
# ------------------------------------------
# Applies to all F4 targets, but not propagated to dependents.
local generic_f4_requirements_cflags = 
    -fno-common
    -fmessage-length=0
    -fno-exceptions
    -ffunction-sections
    -fdata-sections
    -Wall
    --std=gnu11 
    ;

# Assumes all devices are Cortex-M4 processors with HW FPU.
# Will be propagated to dependents
local generic_f4_usage_requirements_cflags = 
    -mfloat-abi=hard
    -mcpu=cortex-m4
    -mthumb
    ;

local generic_f4_usage_requirements_cxxflags = 
    $(generic_f4_usage_requirements_cflags)
    ;

local all_generic_f4_cflags =
    $(generic_f4_requirements_cflags)
    $(generic_f4_usage_requirements_cflags)
    ;

# ------------------------------------------
# Generic STM32F4 Family Linker Flags
# ------------------------------------------
# Applies to all F4 targets, but not propagated to dependents.
local generic_f4_requirements_link_flags = 
    -mthumb 
    -mabi=aapcs 
    ;

# Assumes all devices are Cortex-M4 processors with HW FPU.
# Will be propagated to dependents.
local generic_f4_usage_requirements_link_flags = 
    -mfloat-abi=hard 
    -mcpu=cortex-m4
    -specs=nano.specs 
    -specs=nosys.specs
    ;

local all_generic_f4_link_flags = 
    $(generic_f4_requirements_link_flags)
    $(generic_f4_usage_requirements_link_flags)
    ;

# ------------------------------------------
# Source/Include Directories 
# ------------------------------------------
local f4_hal_driver_src_dir = STM32F4xx_HAL_Driver/Src ;
local f4_dev_system_src_dir = Device/sys ;
local f4_dev_startup_src_dir = Device/startup ;

local f4_hal_inc_dir = STM32F4xx_HAL_Driver/Inc ;
local f4_dev_inc_dir = Device/include ;
local f4_dev_sys_dir = Device/sys ;
local f4_cfg_inc_dir = Device/conf ;
local cmsis_inc_dir = Device/cmsis/core/include ;

local f4_include_dirs = 
    $(f4_hal_inc_dir)
    $(f4_dev_inc_dir)
    $(f4_dev_sys_dir)
    $(f4_cfg_inc_dir)
    $(cmsis_inc_dir)
    ;

# ------------------------------------------
# Source Files
# ------------------------------------------
local f4_common_src = $(f4_dev_system_src_dir)/system_stm32f4xx.c ;
local f4_ll_src = [ glob $(f4_hal_driver_src_dir)/stm32f4xx_ll*.c ] ;
local f4_hal_src = [ glob $(f4_hal_driver_src_dir)/stm32f4xx_hal*.c ] ;

# ====================================================
# Project Definition
# ====================================================
project STM32F4_HAL_DRIVER : usage-requirements <include>$(f4_include_dirs) ;

# ====================================================
# Device Specific Libs: 
#   Figures out what device we are actually compiling for. By default
#   propagates MCU specific defines/cflags/linkflags in the usage-requirements 
#   field. This is how so many chip variants are supported without much effort.
# ====================================================

# ------------------------------------------
# STM32F446RE
# ------------------------------------------
alias F4_TARGET_MCU : 
    :   <Thor>enabled-F446
        <Thor>enabled-RE
    :
    # Expect all these to be propagated to all projects
    :   <define>STM32F446xx                     
        <define>CHIMERA_LITTLE_ENDIAN                               # We are a little endian device
        <linkflags>-mfpu=fpv4-sp-d16                                # Use hardware FPU
        <linkflags>$(generic_f4_usage_requirements_link_flags)      
        <linkflags>-T$(linker_dir)/STM32F446RE_flash.lds            # Linker script
        <cflags>$(generic_f4_usage_requirements_cflags)             
        <cflags>-mfpu=fpv4-sp-d16                                  
        <cxxflags>$(generic_f4_usage_requirements_cflags)           
        <cxxflags>-mfpu=fpv4-sp-d16
    ;

lib F4_TARGET_SRC 
    :   $(f4_dev_startup_src_dir)/startup_stm32f446xx.c
    
    :   <Thor>enabled-F446
        <link>static
        <define>DEBUG_DEFAULT_INTERRUPT_HANDLERS
        <use>F4_TARGET_MCU 
    ;

# ------------------------------------------
# Add more here
# ------------------------------------------

explicit F4_TARGET_SRC ;
explicit F4_TARGET_MCU ;

# ====================================================
# STM32 HAL Low Level Driver 
# ====================================================
# ------------------------------------------
# Debug Variant
# ------------------------------------------
lib LL_DRIVER 
    :   $(f4_ll_src)
        $(f4_common_src)
        F4_TARGET_SRC

    :   <variant>debug
        <link>static
        <include>$(f4_include_dirs)
        <define>$(f4_dbg_defs)
        <define>USE_FULL_LL_DRIVER
        <cflags>$(f4_dbg_cflags)
        <cflags>$(all_generic_f4_cflags)
        <use>F4_TARGET_MCU
    :   
    :   <define>USE_FULL_LL_DRIVER
        <use>F4_TARGET_MCU
    ;

# ------------------------------------------
# Release Variant
# ------------------------------------------
lib LL_DRIVER 
    :   $(f4_ll_src) 
        $(f4_common_src)
        F4_TARGET_SRC

    :   <variant>release
        <link>static
        <include>$(f4_include_dirs)
        <define>$(f4_rel_defs)
        <define>USE_FULL_LL_DRIVER
        <cflags>$(f4_rel_cflags)
        <cflags>$(all_generic_f4_cflags)
        <use>F4_TARGET_MCU
    :   
    :   <define>USE_FULL_LL_DRIVER
        <use>F4_TARGET_MCU
    ;

explicit LL_DRIVER ;

# ====================================================
# STM32 HAL Standard Driver 
# ====================================================
# ------------------------------------------
# Debug Variant
# ------------------------------------------
lib HAL_DRIVER 
    :   $(f4_hal_src)  
        $(f4_common_src)
        F4_TARGET_SRC

    :   <variant>debug
        <link>static
        <include>$(f4_include_dirs)
        <define>$(f4_dbg_defs)
        <cflags>$(f4_dbg_cflags)
        <cflags>$(all_generic_f4_cflags)
        <use>F4_TARGET_MCU
    :   
    :   <use>F4_TARGET_MCU
    ;

# ------------------------------------------
# Release Variant
# ------------------------------------------
lib HAL_DRIVER
    :   $(f4_hal_src) 
        $(f4_common_src)
        F4_TARGET_SRC

    :   <variant>release
        <link>static
        <include>$(f4_include_dirs)
        <define>$(f4_rel_defs)
        <cflags>$(f4_rel_cflags)
        <cflags>$(all_generic_f4_cflags)
        <use>F4_TARGET_MCU
    :   
    :   <use>F4_TARGET_MCU
    ;

explicit HAL_DRIVER ;

# ====================================================
# Public Components 
# ====================================================
explicit_alias PUB : : : : <include>$(f4_include_dirs) ;

# ====================================================
# Aliases to build from command line
# ====================================================
explicit_alias F4_HAL : HAL_DRIVER : : : <use>PUB ;
explicit_alias F4_LL : LL_DRIVER : : : <use>PUB ;
explicit_alias F4_LIB : F4_HAL F4_LL : : : <use>PUB ;
